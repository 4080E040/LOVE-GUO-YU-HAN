# OWASP 十大網路應用系統安全弱點說明 
## 1. Injection Flaws
```
在網路應用程式中，Injection 弱點很常見，尤其在 SQL Injection。而 Injection 發生，通常是使用者提供的資料傳輸到interpreter， 被當成指令或是查詢。攻擊者就能用惡意的資料欺騙 interpreter，達到執行指令或竄改資料目的。
```
## 2. Broken Authentication 失效的身份驗證  
```
攻擊者透過錯誤的使用者應用程式身份認證和會話管理功能，破解密碼、Session Token，或利用其它開發漏洞，暫時性或永久性冒充用戶身份。
```
## 3. Sensitive Data Exposure 敏感資料外漏
```
許多 Web 應用系統和 API 都無法正確保護敏感資訊，例如財務資料、醫療資料和個人資料等。攻擊者可透過竊取或修改未加密數據，實施信用卡詐騙、身份盜取或其他犯罪行為。未加密的敏感資料容易受到破壞，因此，使用者需要對敏感資料加密，包括傳輸過程中的資料、儲存的資料及瀏覽器的交換資料。
```
## 4. XML External Entities (XXE) 外部處理器漏洞
```
許多早期或設定錯誤的 XML 處理器，沒做好相關權限保護，造成機密資料外洩風險產生。攻擊者可利用以 XML 為基礎的應用程式或網路服務，竊取使用 URL 呼叫的內部文件、共享文件和掃描連接埠，藉此監聽內部網路、執行遠端程式和實施 DDoS 攻擊。
```
## 5. Broken Access Control  存取控制的破解
```
合併易混淆的 A4 Insecure Direct Object Reference 及 A7 Broken Authentication and Session Management 為無效的存取控管。建 議處理檔案或敏感性資料時，需嚴格進行監控及身份權限驗證，降低駭客利用漏洞存取未經驗證或授權的功能察看敏感資料、修改數據和提升存取權限等。
```
## 6. Security Misconﬁguration  不安全的組態設定 
```
應用系統的組態設定常被忽略，而組態設定通常是由於不安全的預設值、錯誤的 HTTP 標頭配置及包含敏感信息的詳細錯誤信息造成。因此使用者不僅需要對所有的操作系統、框架、函式庫和應用程序進行安全的設定，並必須即時修補和升級它們。
```
## 7. Cross-Site Scripting（XSS) 跨站腳本攻擊
```
當應用程式未將使用者提供的資料驗證或進行內容編碼，就將資料傳輸到網路瀏覽器，即可能發生。XSS 能讓攻擊者直接在受害者的網路瀏覽器上執行 Script，劫持使用者的 Sessions 或竄改網站內容等。
```
## 8. Insecure Deserialization 不安全的反序列化漏洞
```
該問題主要鎖定 Java、PHP 或 Node.js 等平臺攻擊，造成遠程代碼執行。即使反序列化缺陷不會導致遠程代碼執行，攻擊者也能利用它們執行重播攻擊、注入攻擊和特權升級攻擊等。
```
## 9. Using Components with  Known Vulnerabilities 使用已知漏洞元件
```
現行開發模式有 Dev Ops 及 Agile，為達到快速產出，開發人員通常會引用 Open Source Software (OSS)，卻沒監控該 OSS 的弱點問題，包括函式庫、框架及其他的軟體模組，而 OSS 卻會和應用程式以相同的權限執行。如果有一個容易受到攻擊的 OSS 被駭客利用，就可能導致資料洩漏或伺服器被利用，且使用有漏洞的應用程式或 API，都會破壞應用程式的防護，讓各種攻擊形式接踵而來。這也意味著，許多開發者在使用 OSS 模組或框架的習慣不好，除造成資料遺失外，也代表沒有即時升級或更新到最新版。
```
## 10. Insufﬁcient Logging & Monitoring  記錄與監控不足 
```
當記錄與監控不足時，攻擊者能進一步攻擊系統、竄改資料、存取資料或刪除資料。而多數研究報告指出，當系統被攻擊後，受害系統要花超過 200 天以上才會發現資料外洩，且通常是透過第三方檢測工具發現，不是透過內部流程監控。
```
根據 NIST (National Institute of Standards and Technology) 指出 92% 的安全漏洞來自軟體， 如何在軟體開發過程中做到安全的軟體開發，應是各家企業必須關注的重要事項之一。叡揚根據多年經驗，整理軟體開發生命週期中從設計、開發、測試及上線維運各階段對資訊安全的需求，簡單歸納如下：

設計階段：清楚定義各功能資訊安全政策，尋找適用且安全之 OpenSource 元件。

開發階段：能針對原始碼及 OpenSource 元件做安全漏洞掃描，能依漏洞嚴重程度做等級分類，追蹤問題根源及提供修復建議，並有稽核機制做審查及追蹤修復狀況，及早發現問題，遂能降低修復成本及預防重複性的錯誤。

測試階段：模擬駭客進行滲透測試及追蹤安全根源，確保測試完整度。

上線維運階段：即時、有效的強化已上線的應用系統，提供防禦功能、監控及追蹤攻擊。

叡揚代理了許多國際知名資安產品協助客戶加強資安、降低風險，下列介紹 Checkmarx 源碼安全檢測解決方案與 WhiteSource 開放性源碼安全檢測解決方案。
```
